spring.application.name=server

# S3
cloud.aws.region.static=ap-northeast-2
cloud.aws.stack.auto-=false
cloud.aws.credentials.accessKey=${{ secrets.AWS_ACCESS_KEY }}
cloud.aws.credentials.secretKey=${{ secrets.AWS_SECRET_KEY }}
cloud.aws.s3.bucket=${{ secrets.AWS_BUCKET }}
cloud.aws.stack.auto=false

#mySQL
spring.datasource.driver-class-name= com.mysql.cj.jdbc.driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.datasource.url=jdbc:mysql://host.docker.internal:3306/poompoom
spring.datasource.password=${{ secrets.DATABASE_PASSWORD }}
spring.datasource.username=${{ secrets.DATABASE_USERNAME }}

#filesize
spring.servlet.multipart.max-file-size= 50MB

#jwt
jwt.secret = ${{ secrets.JWT_SECRET }}

#email
email.sendmail= ${{ secrets.EMAIL_SENDMAIL }}
email.password= ${{ secrets.EMAIL_PASSWORD }}

#social redirect uri
social.local.url = http://localhost:3000/
social.ec2.url = http://localhost:3000/
social.tempuser = test
social.user = login

#registration naver
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=${{ secrets.NAVER_CLIENT_ID }}
spring.security.oauth2.client.registration.naver.client-secret=${{ secrets.NAVER_SECRET }}
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email

#provider naver
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

#registration google
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${{ secrets.GOOGLE_ID }}
spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_SECRET }}
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email

#registration kakao
spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_ID }}
spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_SECRET }}
spring.security.oauth2.client.registration.kakao.scope= account_email, profile_nickname
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri= https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri= https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute= id
